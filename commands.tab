/**************************************************************************
 * This program is Copyright (C) 1986-2002 by Jonathan Payne.  JOVE is    *
 * provided by Jonathan and Jovehacks without charge and without          *
 * warranty.  You may copy, modify, and/or distribute JOVE, provided that *
 * this notice is included in all the source files and documentation.     *
 **************************************************************************/

/* This file is #included by commands.c and setmaps.c
 * Each defines PROC differently!
 */

#ifdef MAC
#	define WIRED_CMD(c) PROC(c),'\0','\0'	/* for About Jove... */
#else
#	define WIRED_CMD(c)	PROC(c)
#endif /* MAC */

#define NULLCMD	WIRED_CMD((cmdproc_t)0)

/* Table of commands
 *
 * Note: must be kept in alphabetical order (setmaps does a check).
 */

const struct cmd	commands[] = {
#ifdef LISP
	{ COMMAND, "add-lisp-special", WIRED_CMD(AddSpecial) },
#endif
	{ COMMAND, "append-region", WIRED_CMD(AppReg) },
	{ COMMAND, "apropos", WIRED_CMD(Apropos) },
	{ COMMAND, "auto-execute-command", WIRED_CMD(CAutoExec) },
	{ COMMAND, "auto-execute-macro", WIRED_CMD(MAutoExec) },
	{ DefMinor(Fill), "auto-fill-mode", NULLCMD },
	{ DefMinor(Indent), "auto-indent-mode", NULLCMD },
	{ COMMAND, "backward-character", WIRED_CMD(BackChar) },
	{ COMMAND, "backward-list", WIRED_CMD(BList) },
	{ COMMAND, "backward-paragraph", WIRED_CMD(BackPara) },
	{ COMMAND, "backward-s-expression", WIRED_CMD(BSexpr) },
	{ COMMAND, "backward-sentence", WIRED_CMD(Bos) },
	{ COMMAND, "backward-up-list", WIRED_CMD(BUpList) },
	{ COMMAND, "backward-word", WIRED_CMD(BackWord) },
	{ COMMAND, "begin-kbd-macro", WIRED_CMD(Remember) },
	{ COMMAND, "beginning-of-file", WIRED_CMD(Bof) },
	{ COMMAND, "beginning-of-line", WIRED_CMD(Bol) },
	{ COMMAND, "beginning-of-window", WIRED_CMD(Bow) },
	{ COMMAND, "bind-keymap-to-key", WIRED_CMD(BindMap) },
	{ COMMAND, "bind-macro-to-key", WIRED_CMD(BindMac) },
#ifdef ABBREV
	{ COMMAND, "bind-macro-to-word-abbrev", WIRED_CMD(BindMtoW) },
#endif
	{ COMMAND, "bind-to-key", WIRED_CMD(BindAKey) },
	{ COMMAND, "buffer-position", WIRED_CMD(BufPos) },
	{ DefMajor(CMODE), "c-mode", NULLCMD },
	{ MODCMD, "case-character-capitalize", WIRED_CMD(CapChar) },
	{ MODCMD, "case-region-lower", WIRED_CMD(CasRegLower) },
	{ MODCMD, "case-region-upper", WIRED_CMD(CasRegUpper) },
	{ MODCMD, "case-word-capitalize", WIRED_CMD(CapWord) },
	{ MODCMD, "case-word-lower", WIRED_CMD(LowWord) },
	{ MODCMD, "case-word-upper", WIRED_CMD(UppWord) },
	{ COMMAND, "cd", WIRED_CMD(Chdir) },
	{ MODCMD, "character-to-octal-insert", WIRED_CMD(ChrToOct) },
	{ COMMAND, "clear-and-redraw", WIRED_CMD(ClAndRedraw) },
#ifdef SUBSHELL
	{ COMMAND, "compile-it", WIRED_CMD(MakeErrors) },
#endif
#ifdef PTYPROCS
	{ COMMAND, "continue-process", WIRED_CMD(ProcCont) },
#endif
	{ COMMAND, "copy-region", WIRED_CMD(CopyRegion) },
	{ COMMAND, "current-error", WIRED_CMD(ShowErr) },
	{ COMMAND, "date", WIRED_CMD(prCTIME) },
#ifdef IPROCS
	{ DefMinor(DbxMode), "dbx-mode", NULLCMD },
#endif
#ifdef ABBREV
	{ COMMAND, "define-global-word-abbrev", WIRED_CMD(DefGAbbrev) },
#endif
	{ COMMAND, "define-macro", WIRED_CMD(DefKBDMac) },
#ifdef ABBREV
	{ COMMAND, "define-mode-word-abbrev", WIRED_CMD(DefMAbbrev) },
#endif
	{ MODCMD, "delete-blank-lines", WIRED_CMD(DelBlnkLines) },
	{ COMMAND, "delete-buffer", WIRED_CMD(BufKill) },
	{ COMMAND, "delete-current-window", WIRED_CMD(DelCurWindow) },
	{ MODCMD, "delete-next-character", WIRED_CMD(DelNChar) },
	{ COMMAND, "delete-other-windows", WIRED_CMD(OneWindow) },
	{ MODCMD, "delete-previous-character", WIRED_CMD(DelPChar) },
	{ MODCMD, "delete-white-space", WIRED_CMD(DelWtSpace) },
	{ COMMAND, "describe-bindings", WIRED_CMD(DescBindings) },
	{ COMMAND, "describe-command", WIRED_CMD(DescCom) },
	{ COMMAND, "describe-key", WIRED_CMD(KeyDesc) },
	{ COMMAND, "describe-variable", WIRED_CMD(DescVar) },
	{ COMMAND, "digit", WIRED_CMD(Digit) },
	{ COMMAND, "digit-0", WIRED_CMD(Digit0) },
	{ COMMAND, "digit-1", WIRED_CMD(Digit1) },
	{ COMMAND, "digit-2", WIRED_CMD(Digit2) },
	{ COMMAND, "digit-3", WIRED_CMD(Digit3) },
	{ COMMAND, "digit-4", WIRED_CMD(Digit4) },
	{ COMMAND, "digit-5", WIRED_CMD(Digit5) },
	{ COMMAND, "digit-6", WIRED_CMD(Digit6) },
	{ COMMAND, "digit-7", WIRED_CMD(Digit7) },
	{ COMMAND, "digit-8", WIRED_CMD(Digit8) },
	{ COMMAND, "digit-9", WIRED_CMD(Digit9) },
	{ COMMAND, "digit-minus", WIRED_CMD(DigitMinus) },
	{ COMMAND, "dirs", WIRED_CMD(prDIRS) },
	{ COMMAND, "down-list", WIRED_CMD(FDownList) },
#ifdef PTYPROCS
	{ COMMAND, "dstop-process", WIRED_CMD(ProcDStop) },
#endif
#ifdef ABBREV
	{ COMMAND, "edit-word-abbrevs", WIRED_CMD(EditAbbrevs) },
#endif
	{ COMMAND, "end-kbd-macro", WIRED_CMD(Forget) },
	{ COMMAND, "end-of-file", WIRED_CMD(Eof) },
	{ COMMAND, "end-of-line", WIRED_CMD(Eol) },
	{ COMMAND, "end-of-window", WIRED_CMD(Eow) },
#ifdef PTYPROCS
	{ COMMAND, "eof-process", WIRED_CMD(ProcEof) },
#endif
	{ COMMAND, "erase-buffer", WIRED_CMD(BufErase) },
	{ COMMAND, "exchange-point-and-mark", WIRED_CMD(ExchPtMark) },
	{ COMMAND, "execute-kbd-macro", WIRED_CMD(ExecMacro) },
	{ COMMAND, "execute-macro", WIRED_CMD(RunMacro) },
	{ COMMAND, "execute-named-command", WIRED_CMD(Extend) },
	{ COMMAND, "exit-jove", WIRED_CMD(Leave) },
#ifdef CMT_FMT
	{ MODCMD, "fill-comment", WIRED_CMD(FillComment) },
#endif /* CMT_FMT */
	{ MODCMD, "fill-paragraph", WIRED_CMD(FillParagraph) },
	{ MODCMD, "fill-region", WIRED_CMD(FillRegion) },
#ifdef SUBSHELL
	{ MODCMD, "filter-region", WIRED_CMD(FilterRegion) },
#endif
	{ COMMAND, "find-file", WIRED_CMD(FindFile) },
	{ COMMAND, "find-tag", WIRED_CMD(FindTag) },
	{ COMMAND, "find-tag-at-point", WIRED_CMD(FDotTag) },
	{ COMMAND, "first-non-blank", WIRED_CMD(ToIndent) },
	{ COMMAND, "forward-character", WIRED_CMD(ForChar) },
	{ COMMAND, "forward-list", WIRED_CMD(FList) },
	{ COMMAND, "forward-paragraph", WIRED_CMD(ForPara) },
	{ COMMAND, "forward-s-expression", WIRED_CMD(FSexpr) },
	{ COMMAND, "forward-sentence", WIRED_CMD(Eos) },
	{ COMMAND, "forward-word", WIRED_CMD(ForWord) },
	{ DefMajor(FUNDAMENTAL), "fundamental-mode", NULLCMD },
	{ COMMAND, "gather-numeric-argument", WIRED_CMD(TimesFour) },
	{ COMMAND, "goto-line", WIRED_CMD(GoLine) },
	{ COMMAND, "goto-window-with-buffer", WIRED_CMD(GotoWind) },
#ifdef LISP
	{ MODCMD, "grind-s-expr", WIRED_CMD(GSexpr) },
#endif
	{ COMMAND, "grow-window", WIRED_CMD(GrowWindowCmd) },
	{ MODCMD, "handle-tab", WIRED_CMD(Tab) },
	{ COMMAND, "i-search-forward", WIRED_CMD(IncFSearch) },
	{ COMMAND, "i-search-reverse", WIRED_CMD(IncRSearch) },
#ifdef IPROCS
	{ COMMAND, "i-shell-command", WIRED_CMD(Iprocess) },
#endif
	{ MODCMD, "insert-file", WIRED_CMD(InsFile) },
	{ MODCMD, "insert-variable", WIRED_CMD(InsVar) },
#ifdef IPROCS
	{ COMMAND, "interrupt-process", WIRED_CMD(ProcInt) },
	{ COMMAND, "iproc-env-export", WIRED_CMD(IprocEnvExport) },
	{ COMMAND, "iproc-env-show", WIRED_CMD(IprocEnvShow) },
	{ COMMAND, "iproc-env-unset", WIRED_CMD(IprocEnvUnset) },
#endif
	{ MODCMD, "kill-next-word", WIRED_CMD(DelNWord) },
	{ MODCMD, "kill-previous-word", WIRED_CMD(DelPWord) },
#ifdef IPROCS
	{ COMMAND, "kill-process", WIRED_CMD(ProcKill) },
#endif
	{ MODCMD, "kill-region", WIRED_CMD(DelReg) },
	{ MODCMD, "kill-s-expression", WIRED_CMD(KillExpr) },
	{ COMMAND, "kill-some-buffers", WIRED_CMD(KillSome) },
	{ MODCMD, "kill-to-beginning-of-sentence", WIRED_CMD(KillBos) },
	{ MODCMD, "kill-to-end-of-line", WIRED_CMD(KillEOL) },
	{ MODCMD, "kill-to-end-of-sentence", WIRED_CMD(KillEos) },
	{ COMMAND, "left-margin-here", WIRED_CMD(SetLMargin) },
#ifdef LISP
	{ DefMajor(LISPMODE), "lisp-mode", NULLCMD },
#endif
	{ COMMAND, "list-buffers", WIRED_CMD(BufList) },
#ifdef IPROCS
	{ COMMAND, "list-processes", WIRED_CMD(ProcList) },
#endif
	{ COMMAND, "local-bind-keymap-to-key", WIRED_CMD(LBindMap) },
	{ COMMAND, "local-bind-macro-to-key", WIRED_CMD(LBindMac) },
	{ COMMAND, "local-bind-to-key", WIRED_CMD(LBindAKey) },
	{ COMMAND, "make-buffer-unmodified", WIRED_CMD(NotModified) },
	{ COMMAND, "make-macro-interactive", WIRED_CMD(MacInter) },
	{ COMMAND, "name-kbd-macro", WIRED_CMD(NameMac) },
	{ MODCMD, "newline", WIRED_CMD(Newline) },
	{ MODCMD, "newline-and-backup", WIRED_CMD(OpenLine) },
	{ MODCMD, "newline-and-indent", WIRED_CMD(LineAI) },
	{ COMMAND, "next-error", WIRED_CMD(NextError) },
	{ COMMAND, "next-line", WIRED_CMD(NextLine) },
	{ COMMAND, "next-page", WIRED_CMD(NextPage) },
	{ COMMAND, "next-window", WIRED_CMD(NextWindow) },
	{ COMMAND, "number-lines-in-window", WIRED_CMD(WNumLines) },
	{ DefMinor(OverWrite), "over-write-mode", NULLCMD },
	{ COMMAND, "page-next-window", WIRED_CMD(PageNWind) },
	{ MODCMD, "paren-flash", WIRED_CMD(DoParen) },
	{ COMMAND, "parse-errors", WIRED_CMD(ErrParse) },
#ifdef SPELL
	{ COMMAND, "parse-spelling-errors-in-buffer", WIRED_CMD(SpelWords) },
#endif
#ifdef JOB_CONTROL
	{ COMMAND, "pause-jove", WIRED_CMD(PauseJove) },
#else
#	ifdef SUBSHELL
	{ COMMAND, "pause-jove", WIRED_CMD(Push) },
#	endif
#endif
	{ COMMAND, "pop-mark", WIRED_CMD(PopMark) },
	{ COMMAND, "popd", WIRED_CMD(Popd) },
	{ COMMAND, "previous-error", WIRED_CMD(PrevError) },
	{ COMMAND, "previous-line", WIRED_CMD(PrevLine) },
	{ COMMAND, "previous-page", WIRED_CMD(PrevPage) },
	{ COMMAND, "previous-window", WIRED_CMD(PrevWindow) },
	{ COMMAND, "print", WIRED_CMD(PrVar) },
#ifdef SUBSHELL
	{ COMMAND, "proc-env-export", WIRED_CMD(ProcEnvExport) },
	{ COMMAND, "proc-env-show", WIRED_CMD(ProcEnvShow) },
	{ COMMAND, "proc-env-unset", WIRED_CMD(ProcEnvUnset) },
#endif
#ifdef IPROCS
	{ COMMAND, "process-bind-keymap-to-key", WIRED_CMD(PBindMap) },
	{ COMMAND, "process-bind-macro-to-key", WIRED_CMD(PBindMac) },
	{ COMMAND, "process-bind-to-key", WIRED_CMD(PBindAKey) },
	{ MODCMD, "process-newline", WIRED_CMD(ProcNewline) },
	{ COMMAND, "process-send-data-no-return", WIRED_CMD(ProcSendData) },
#endif
#ifdef SUBSHELL
	{ COMMAND, "push-shell", WIRED_CMD(Push) },
#endif
	{ COMMAND, "pushd", WIRED_CMD(Pushd) },
	{ COMMAND, "pushlibd", WIRED_CMD(Pushlibd) },
	{ COMMAND, "pwd", WIRED_CMD(prCWD) },
	{ MODCMD, "query-replace-string", WIRED_CMD(QRepSearch) },
#ifdef IPROCS
	{ COMMAND, "quit-process", WIRED_CMD(ProcQuit) },
#endif
	{ MODCMD, "quoted-insert", WIRED_CMD(QuotChar) },
	{ DefMinor(BReadOnly), "read-only-mode", NULLCMD },
#ifdef ABBREV
	{ COMMAND, "read-word-abbrev-file", WIRED_CMD(RestAbbrevs) },
#endif
	{ COMMAND, "recursive-edit", WIRED_CMD(Recur) },
	{ COMMAND, "redraw-display", WIRED_CMD(RedrawDisplay) },
	{ COMMAND, "rename-buffer", WIRED_CMD(ReNamBuf) },
	{ MODCMD, "replace-in-region", WIRED_CMD(RegReplace) },
	{ MODCMD, "replace-string", WIRED_CMD(RepSearch) },
	{ COMMAND, "right-margin-here", WIRED_CMD(SetRMargin) },
	{ COMMAND, "save-file", WIRED_CMD(SaveFile) },
	{ COMMAND, "scroll-down", WIRED_CMD(DownScroll) },
	{ COMMAND, "scroll-left", WIRED_CMD(ScrollLeft) },
	{ COMMAND, "scroll-right", WIRED_CMD(ScrollRight) },
	{ COMMAND, "scroll-up", WIRED_CMD(UpScroll) },
	{ COMMAND, "search-forward", WIRED_CMD(ForSearch) },
	{ COMMAND, "search-forward-nd", WIRED_CMD(FSrchND) },
	{ COMMAND, "search-reverse", WIRED_CMD(RevSearch) },
	{ COMMAND, "search-reverse-nd", WIRED_CMD(RSrchND) },
	{ COMMAND, "select-buffer", WIRED_CMD(BufSelect) },
	{ COMMAND, "select-buffer-1", WIRED_CMD(Buf1Select) },
	{ COMMAND, "select-buffer-10", WIRED_CMD(Buf10Select) },
	{ COMMAND, "select-buffer-2", WIRED_CMD(Buf2Select) },
	{ COMMAND, "select-buffer-3", WIRED_CMD(Buf3Select) },
	{ COMMAND, "select-buffer-4", WIRED_CMD(Buf4Select) },
	{ COMMAND, "select-buffer-5", WIRED_CMD(Buf5Select) },
	{ COMMAND, "select-buffer-6", WIRED_CMD(Buf6Select) },
	{ COMMAND, "select-buffer-7", WIRED_CMD(Buf7Select) },
	{ COMMAND, "select-buffer-8", WIRED_CMD(Buf8Select) },
	{ COMMAND, "select-buffer-9", WIRED_CMD(Buf9Select) },
	{ MODCMD, "self-insert", WIRED_CMD(SelfInsert) },
	{ COMMAND, "set", WIRED_CMD(SetVar) },
	{ COMMAND, "set-mark", WIRED_CMD(SetMark) },
#ifdef IPROCS	/* for GNU compatibility */
	{ COMMAND, "shell", WIRED_CMD(ShellProc) },
#endif
#ifdef SUBSHELL
	{ COMMAND, "shell-command", WIRED_CMD(ShellCom) },
	{ COMMAND, "shell-command-no-buffer", WIRED_CMD(ShNoBuf) },
	{ COMMAND, "shell-command-to-buffer", WIRED_CMD(ShToBuf) },
	{ COMMAND, "shell-command-with-typeout", WIRED_CMD(Shtypeout) },
#endif
	{ MODCMD, "shift-region-left", WIRED_CMD(LRShift) },
	{ MODCMD, "shift-region-right", WIRED_CMD(RRShift) },
	{ DefMinor(ShowMatch), "show-match-mode", NULLCMD },
	{ COMMAND, "shrink-window", WIRED_CMD(ShrWindow) },
	{ COMMAND, "source", WIRED_CMD(Source) },
#ifdef SPELL
	{ COMMAND, "spell-buffer", WIRED_CMD(SpelBuffer) },
#endif
	{ COMMAND, "split-current-window", WIRED_CMD(SplitWind) },
	{ COMMAND, "start-remembering", WIRED_CMD(Remember) },
#ifdef PTYPROCS
	{ COMMAND, "stop-process", WIRED_CMD(ProcStop) },
#endif
	{ COMMAND, "stop-remembering", WIRED_CMD(Forget) },
	{ COMMAND, "string-length", WIRED_CMD(StrLength) },
#ifdef JOB_CONTROL
	{ COMMAND, "suspend-jove", WIRED_CMD(PauseJove) },
#endif
	{ COMMAND, "teach-jove", WIRED_CMD(TeachJove) },
	{ DefMajor(TEXTMODE), "text-mode", NULLCMD },
	{ MODCMD, "transpose-characters", WIRED_CMD(TransChar) },
	{ MODCMD, "transpose-lines", WIRED_CMD(TransLines) },
	{ COMMAND, "unbound", WIRED_CMD(Unbound) },
	{ COMMAND, "version", WIRED_CMD(ShowVersion) },
	{ COMMAND, "visible-spaces-in-window", WIRED_CMD(WVisSpace) },
	{ COMMAND, "visit-file", WIRED_CMD(JReadFile) },
	{ COMMAND, "window-find", WIRED_CMD(WindFind) },
#ifdef ABBREV
	{ DefMinor(Abbrev), "word-abbrev-mode", NULLCMD },
#endif
	{ COMMAND, "write-file", WIRED_CMD(JWriteFile) },
	{ COMMAND, "write-macros-to-file", WIRED_CMD(WriteMacs) },
	{ COMMAND, "write-modified-files", WIRED_CMD(WtModBuf) },
	{ COMMAND, "write-region", WIRED_CMD(WrtReg) },
#ifdef ABBREV
	{ COMMAND, "write-word-abbrev-file", WIRED_CMD(SaveAbbrevs) },
#endif
#ifdef MOUSE
	{ COMMAND, "xj-mouse-copy-cut", WIRED_CMD(xjMouseCopyCut) },
	{ COMMAND, "xj-mouse-line", WIRED_CMD(xjMouseLine) },
	{ COMMAND, "xj-mouse-mark", WIRED_CMD(xjMouseMark) },
	{ COMMAND, "xj-mouse-point", WIRED_CMD(xjMousePoint) },
	{ COMMAND, "xj-mouse-word", WIRED_CMD(xjMouseWord) },
	{ COMMAND, "xj-mouse-yank", WIRED_CMD(xjMouseYank) },
	{ COMMAND, "xt-mouse-cut-point-yank", WIRED_CMD(xtMouseCutPointYank) },
	{ COMMAND, "xt-mouse-extend", WIRED_CMD(xtMouseExtend) },
	{ COMMAND, "xt-mouse-mark", WIRED_CMD(xtMouseMark) },
	{ COMMAND, "xt-mouse-mark-drag-point-copy", WIRED_CMD(xtMouseMarkDragPointCopy) },
	{ COMMAND, "xt-mouse-null", WIRED_CMD(xtMouseNull) },
	{ COMMAND, "xt-mouse-point", WIRED_CMD(xtMousePoint) },
	{ COMMAND, "xt-mouse-point-yank", WIRED_CMD(xtMousePointYank) },
	{ COMMAND, "xt-mouse-yank", WIRED_CMD(xtMouseYank) },
#endif
	{ MODCMD, "yank", WIRED_CMD(Yank) },
	{ MODCMD, "yank-pop", WIRED_CMD(YankPop) },
	{ COMMAND, NULL, NULLCMD },
};
